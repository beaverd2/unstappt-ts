import type { NextPage } from 'next';
import Head from 'next/head';

import React, { useState } from 'react';
import { Flex, Container, Center, Link } from '@chakra-ui/react';
import { createStandaloneToast } from '@chakra-ui/toast';
import Header from '../components/Header';
import User from '../components/User';
import DrinkingPattern from '../components/DrinkingPattern';
import axios from 'axios';
import { AxiosError } from 'axios';
import TopBeers from '../components/TopBeers';
import TopRegions from '../components/TopRegions';
import TopStyles from '../components/TopStyles';
import dayjs from 'dayjs';
import Statistics from '../components/Statistics';
import DatePickerContainer from '../components/DatePickerContainer';
import ActivityContainer from '../components/Activity/ActivityContainer';
import Sessions from '../components/Sessions';
import BeerTable from '../components/BeerTable';
import TopCountries from '../components/TopCountries';
import TopBreweries from '../components/TopBreweries';

import { beers1, user1, emptyBeers } from '../MockApi';
import { IUser } from '../types/IUser';
import { IBeers } from '../types/IBeers';

const Home: NextPage = () => {
  const [beers, setBeers] = useState<IBeers[]>(beers1.response.beers.items);
  const [user, setUser] = useState<IUser>(user1.user);
  const [error, setError] = useState(null);
  // const [beers, setBeers] = useState(null);
  // const [user, setUser] = useState(null);
  const [startDate, setStartDate] = useState(
    dayjs().subtract(7, 'days').format()
  );
  const [endDate, setEndDate] = useState(dayjs().format());
  const [isLoading, setIsLoading] = useState(false);
  const auth = `&client_id=${process.env.NEXT_PUBLIC_CLIENT_ID}&client_secret=${process.env.NEXT_PUBLIC_CLIENT_SECRET}`;
  const fetchBeers = async (url: string) => {
    setIsLoading(true);
    const fullUrl = url + auth;
    try {
      const response = await axios.get(fullUrl);
      const data = response.data.response;
      const beers = data.beers.items;
      if (data.total_count > 50) {
        let endpoints = [
          ...Array(Math.floor(data.total_count / 50)).keys(),
        ].map((key) => fullUrl + '&offset=' + (key + 1) * 50);
        const allResponses = await axios.all(
          endpoints.map((endpoint) => axios.get(endpoint))
        );
        const allBeers = allResponses
          .map((response) => response.data.response.beers.items)
          .reduce((a, b) => a.concat(b), []);
        return beers.concat(allBeers);
      } else {
        return beers;
      }
    } catch (error: any) {
      setError(error?.response.data.meta.error_detail);
    } finally {
      setIsLoading(false);
    }
  };

  const fetchUser = async (username: string) => {
    setIsLoading(true);
    try {
      const response = await axios.get(
        `https://api.untappd.com/v4/user/info/${username}?` + auth
      );
      const user: IUser = response.data.response.user;
      return user;
    } catch (error: any) {
      setError(error?.response.data.meta.error_detail);
    } finally {
      setIsLoading(false);
    }
  };
  const fetchAll = async (username: string) => {
    const now = dayjs();
    const weekAgo = dayjs().subtract(7, 'days');
    const user = await fetchUser(username);
    const allBeers = await fetchBeers(
      `https://api.untappd.com/v4/user/beers/${username}?limit=50&start_date=${weekAgo.format(
        'YYYY-MM-DD'
      )}&end_date=${now.format('YYYY-MM-DD')}`
    );
    if (error) {
      Notification(error);
    }
    if (!error) {
      setStartDate(weekAgo.format());
      setEndDate(now.format());
      setUser(user as IUser);
      setBeers(allBeers);
    }
  };

  const fetchBeersForRange = async (startDate: string, endDate: string) => {
    const allBeers = await fetchBeers(
      `https://api.untappd.com/v4/user/beers/${
        user.user_name
      }?limit=50&start_date=${dayjs(startDate).format(
        'YYYY-MM-DD'
      )}&end_date=${dayjs(endDate).format('YYYY-MM-DD')}`
    );
    if (error) {
      Notification(error);
    }
    if (!error) {
      setStartDate(startDate);
      setEndDate(endDate);
      setBeers(allBeers);
    }
  };

  const Notification = (message: string) => {
    const toast = createStandaloneToast({});

    toast({
      title: 'Error',
      description: message,
      status: 'error',
      duration: 3000,
      position: 'top',
      isClosable: true,
    });

    return <></>;
  };
  return (
    <div>
      <Head>
        <title>Unstappt</title>
        <meta name='description' content='Generated by create next app' />
      </Head>
      <Flex bg='gray.100' flexDir='column' flexWrap='wrap' minH='100vh'>
        <Header fetchAll={fetchAll} />
        {(beers || isLoading) && (
          <>
            <Container maxW={['container.sm', 'container.md', 'container.lg']}>
              <User isLoading={isLoading} user={user} />
              <DatePickerContainer
                fetchBeersForRange={fetchBeersForRange}
                isLoading={isLoading}
              />
              <Statistics beers={beers} isLoading={isLoading} />
              <ActivityContainer
                isLoading={isLoading}
                beers={beers}
                startDate={startDate}
                endDate={endDate}
              />
              <Flex
                flexWrap='wrap'
                justifyContent='space-between'
                gridColumnGap={2}
                alignItems='flex-start'
              >
                <TopBeers beersData={beers} isLoading={isLoading} />
                <TopBreweries beers={beers} isLoading={isLoading} />
                <TopStyles beers={beers} isLoading={isLoading} />
                <TopCountries beers={beers} isLoading={isLoading} />
                <TopRegions beers={beers} isLoading={isLoading} />
              </Flex>
              <DrinkingPattern beers={beers} isLoading={isLoading} />
              <Sessions beers={beers} isLoading={isLoading} />
              <BeerTable beers={beers} isLoading={isLoading} user={user} />
            </Container>
          </>
        )}
        <Center py={4} mt='auto'>
          Author:&nbsp;
          <Link
            color='blue.400'
            target='_blank'
            rel='noopener noreferrer'
            href='https://github.com/beaverd2'
          >
            beaverd2
          </Link>
        </Center>
      </Flex>
    </div>
  );
};

export default Home;
